

#include <iostream>
#include <vector>
#include <queue>
#include <omp.h>

#include <stack>


using namespace std;

void parallelBFS(vector<vector<int>>& graph, int start) {
    int n = graph.size();
    vector<bool> visited(n, false);
    queue<int> q;

    visited[start] = true;
    q.push(start);

    cout << "Parallel BFS: ";

    while (!q.empty()) {
        int size = q.size();

        #pragma omp parallel for
        for (int i = 0; i < size; i++) {
            int node;
            #pragma omp critical
            {
                node = q.front();
                q.pop();
                cout << node << " ";
            }

            for (int neighbor : graph[node]) {
                #pragma omp critical
                {
                    if (!visited[neighbor]) {
                        visited[neighbor] = true;
                        q.push(neighbor);
                    }
                }
            }
        }
    }
    cout << endl;
}






void parallelDFS(vector<vector<int>>& graph, int start) {
    int n = graph.size();
    vector<bool> visited(n, false);
    stack<int> s;

    s.push(start);

    cout << "Parallel DFS: ";

    while (!s.empty()) {
        int node;

        #pragma omp critical
        {
            node = s.top();
            s.pop();
        }

        if (!visited[node]) {
            visited[node] = true;
            cout << node << " ";

            #pragma omp parallel for
            for (int i = graph[node].size() - 1; i >= 0; --i) {
                int neighbor = graph[node][i];

                #pragma omp critical
                {
                    if (!visited[neighbor]) {
                        s.push(neighbor);
                    }
                }
            }
        }
    }

    cout << endl;
}

int main() {
    // Example graph: 0-1-2, 0-3
    vector<vector<int>> graph = {
        {1, 3},    // Neighbors of 0
        {0, 2},    // Neighbors of 1
        {1},       // Neighbors of 2
        {0}        // Neighbors of 3
    };

    parallelBFS(graph, 0);
    parallelDFS(graph,0);

    return 0;
}


/* Theory -
Graph -
      0
     / \
    1   3
     \
      2

Parallel BFS: 0 1 3 2
Parallel DFS: 0 3 1 2


ðŸ”· BFS (Breadth-First Search)
Definition:
BFS is a graph traversal algorithm that explores nodes level by level. It starts at the root (or any node), visits all its neighbors, then moves to the neighborsâ€™ neighbors, and so on.

Key Characteristics:

Uses a queue.

Visits nodes in layers.

Good for finding the shortest path in unweighted graphs.

eg -Shortest Path in Unweighted Graphs,Web crawlers.


ðŸ”· Parallel BFS
Definition:
Parallel BFS attempts to distribute the work of visiting nodes at the same level across multiple threads using parallelism (e.g., OpenMP).

Your Implementation:

You parallelized the loop that processes nodes at each level using #pragma omp parallel for.

Used #pragma omp critical to protect shared access to the queue and visited array.

Goal:
Improve speed when exploring many neighbors at once by using multiple threads to check and enqueue them in parallel.

eg -Massive Graph Processing ,GPU Accelerated Pathfinding


ðŸ”´ DFS (Depth-First Search)
Definition:
DFS is a graph traversal algorithm that explores as far as possible along a branch before backtracking. It goes deep into the graph before exploring siblings.

Key Characteristics:

Uses a stack (or recursion).

Explores deep paths first.

Useful for cycle detection, topological sort, etc.

eg - Cycle Detection,Topological Sorting,Solving Puzzles




ðŸ”´ Parallel DFS
Definition:
Parallel DFS tries to explore multiple branches of the DFS tree simultaneously using multiple threads.

Your Implementation:

You parallelized the loop that pushes neighbors onto the stack.

Used #pragma omp critical to synchronize access to the stack and visited array.

Limitation:
DFS is naturally sequential, making it harder to parallelize effectively compared to BFS. Performance gains may be minimal.



eg - Parallel Game AI,Multi-threaded Solvers for Puzzles*/



//Mam

// #include <iostream>
// #include <vector>
// #include <queue>
// #include <omp.h>


// using namespace std;

// // Graph class representing the adjacency list
// class Graph {
//     int V;  // Number of vertices
//     vector<vector<int>> adj;  // Adjacency list

// public:
//     Graph(int V) : V(V), adj(V) {}

//     // Add an edge to the graph
//     void addEdge(int v, int w) {
//         adj[v].push_back(w);
//     }

//     // Parallel Depth-First Search
//     void parallelDFS(int startVertex) {
//         vector<bool> visited(V, false);
//         parallelDFSUtil(startVertex, visited);
//     }

//     // Parallel DFS utility function
//     void parallelDFSUtil(int v, vector<bool>& visited) {
//         visited[v] = true;
//         cout << v << " ";

//         #pragma omp parallel for
//         for (int i = 0; i < adj[v].size(); ++i) {
//             int n = adj[v][i];
//             if (!visited[n])
//                 parallelDFSUtil(n, visited);
//         }
//     }

//     // Parallel Breadth-First Search
//     void parallelBFS(int startVertex) {
//         vector<bool> visited(V, false);
//         queue<int> q;

//         visited[startVertex] = true;
//         q.push(startVertex);

//         while (!q.empty()) {
//             int v = q.front();
//             q.pop();
//             cout << v << " ";

//             #pragma omp parallel for
//             for (int i = 0; i < adj[v].size(); ++i) {
//                 int n = adj[v][i];
//                 if (!visited[n]) {
//                     visited[n] = true;
//                     q.push(n);
//                 }
//             }
//         }
//     }
// };

// int main() {
//     // Create a graph
//     Graph g(7);
//     g.addEdge(0, 1);
//     g.addEdge(0, 2);
//     g.addEdge(1, 3);
//     g.addEdge(1, 4);
//     g.addEdge(2, 5);
//     g.addEdge(2, 6);
    
//     /*
//         0 -------->1
//         |         / \
//         |        /   \
//         |       /     \
//         v       v       v
//         2-      3       4
//         |      |
//         |      |
//         v      v
//         5      6
//     */

//     cout << "Depth-First Search (DFS): ";
//     g.parallelDFS(0);
//     cout << endl;

//     cout << "Breadth-First Search (BFS): ";
//     g.parallelBFS(0);
//     cout << endl;

//     return 0;
// }


// // Depth-First Search (DFS): 0 2 15  6 3 4
// // Breadth-First Search (BFS): 0 2 1 6 5 4 3